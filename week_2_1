import matplotlib.pyplot as plt
import random
import time
import itertools
import math
from collections import namedtuple
from math import sqrt

# based on Peter Norvig's IPython Notebook on the TSP

City = namedtuple('City', 'x y')

# Calculates the distance between two points
def distance(A, B):
    return math.hypot(A.x - B.x, A.y - B.y)

def try_all_tours(cities):
    # generate and test all possible tours of the cities and choose the shortest tour
    tours = alltours(cities)
    return min(tours, key=tour_length)

def two_opt_tours(cities):
    tour = nn_tours(cities)
    if check_intersects(tour):
        tour = two_opt(tour)
    return tour

def two_opt(route):
     best = route
     improved = True
     while improved:
          improved = False
          for i in range(1, len(route)-2):
               for j in range(i+1, len(route)):
                    if j-i == 1: continue # changes nothing, skip then
                    new_route = route[:]
                    new_route[i:j] = route[j-1:i-1:-1] # this is the 2woptSwap
                    if tour_length(new_route) < tour_length(best):
                         print("één keer verwisseld")
                         best = new_route
                         improved = True
          route = best
     return best

def check_intersects(tour):
    for i in range(len(tour)):
        for j in range(len(tour)):
            # Check for two cities if there is an intersection
            intersection = intersect(i,j,tour)
            if intersection:
                return True
    return False

def ccw(A,B,C):
    return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])

# Return true if line segments AB and CD intersect
def intersect(i,j,tour):
    A = tour[i]
    if i == (len(tour) - 1):
        B = tour[0]
    else:
        B = tour[i+1]
    C = tour[j]
    if j == (len(tour) - 1):
        D = tour[0]
    else:
        D = tour[j+1]
    A = (A[0], A[1])
    B = (B[0], B[1])
    C = (C[0], C[1])
    D = (D[0], D[1])
    list = (A,B,C,D)
    if len(list) != len(set(list)):
        return False
    else:
        return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)

def nn_tours(cities):
    current = min(cities)
    print("It starts with city:", current)
    visited = tour = [current]
    while len(visited) < (len(cities)):
        temp_dist = []
        for city in cities:
            if city is not current and city not in visited:
                temp_dist.append((distance(current, city), city))
        if current not in visited:
            visited.append(current)
        if len(temp_dist) == 1:
            current = temp_dist[0][1]
        else:
            current = (min(temp_dist))[1]
        tour.append(current)
    tour.append(tour[0])
    return tour

def alltours(cities):
    # return a list of tours (a list of lists), each tour a permutation of cities,
    # and each one starting with the same city
    # cities is a set, sets don't support indexing
    start = next(iter(cities))
    return [[start] + list(rest)
            for rest in itertools.permutations(cities - {start})]

def tour_length(tour):
    # the total of distances between each pair of consecutive cities in the tour
    return sum(distance(tour[i], tour[i-1])
               for i in range(len(tour)))

def make_cities(n, width=1000, height=1000):
    # make a set of n cities, each with random coordinates within a rectangle (width x height).

    random.seed() # the current system time is used as a seed
    # note: if we use the same seed, we get the same set of cities

    return frozenset(City(random.randrange(width), random.randrange(height))
                     for c in range(n))

def plot_tour(tour):
    # plot the cities as circles and the tour as lines between them
    points = list(tour) + [tour[0]]
    plt.plot([p.x for p in points], [p.y for p in points], 'bo-')
    plt.axis('scaled') # equal increments of x and y have the same length
    plt.axis('off')
    plt.show()

def plot_tsp(algorithm, cities):
    # apply a TSP algorithm to cities, print the time it took, and plot the resulting tour.
    t0 = time.perf_counter()
    tour = algorithm(cities)
    t1 = time.perf_counter()
    print("{} city tour with length {:.1f} in {:.3f} secs for {}"
          .format(len(tour), tour_length(tour), t1 - t0, algorithm.__name__))
    print("Start plotting ...")
    plot_tour(tour)
cities = make_cities(100)
plot_tsp(nn_tours, cities)
plot_tsp(two_opt_tours, cities)
#plot_tsp(nn_tours, cities)

#plot_tsp(try_all_tours, cities)

# b) Ongeveer 1.1/1.2 seconde. Lengte ligt rond de 20000
# c) Vanuit een start punt beide routes pakken en telkens controlen of de lijnen elkaar overlappen (wiskunde intersectie punten)
